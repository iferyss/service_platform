{"version":3,"file":"index.modern.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, MutableRefObject } from \"react\";\nimport {\n  GeocoderAutocomplete,\n  LocationType,\n  SupportedLanguage,\n  GeoPosition,\n  CountyCode,\n  ByCountryCodeOptions,\n  ByCircleOptions,\n  ByRectOptions,\n  ByProximityOptions,\n} from '@geoapify/geocoder-autocomplete';\n\nexport const GeoapifyApiKey = React.createContext<string>('');\n\nexport const GeoapifyContext = (props: any) => {\n  return (\n    <GeoapifyApiKey.Provider value={props.apiKey}>\n      {props.children}\n    </GeoapifyApiKey.Provider>\n  );\n};\n\nexport interface GeoapifyGeocoderAutocompleteOptions {\n  value?: string;\n  type?: LocationType;\n  lang?: SupportedLanguage;\n  limit?: number;\n  placeholder?: string;\n  filterByCountryCode?: ByCountryCodeOptions;\n  filterByPlace?: string;\n  filterByCircle?: ByCircleOptions;\n  filterByRect?: ByRectOptions;\n  biasByCountryCode?: ByCountryCodeOptions;\n  biasByCircle?: ByCircleOptions;\n  biasByRect?: ByRectOptions;\n  biasByProximity?: ByProximityOptions;\n  position?: GeoPosition;\n  countryCodes?: CountyCode[];\n\n  debounceDelay?: number\n  skipIcons?: boolean;\n  addDetails?: boolean;\n  skipSelectionOnArrowKey?: boolean;\n  allowNonVerifiedHouseNumber?: boolean;\n  allowNonVerifiedStreet?: boolean;\n\n  placeSelect?: (value: any) => void;\n  suggestionsChange?: (value: any) => void;\n\n  preprocessHook?: (value: string) => string;\n  postprocessHook?: (feature: any) => string;\n  suggestionsFilter?: (suggestions: any[]) => any[];\n  sendGeocoderRequestFunc?: (value: string, geocoderAutocomplete: GeocoderAutocomplete) => Promise<any>;\n  sendPlaceDetailsRequestFunc?: (feature: any, geocoderAutocomplete: GeocoderAutocomplete) => Promise<any>;\n\n  onUserInput?: (input: string) => void;\n  onOpen?: (opened: boolean) => void;\n  onClose?: (opened: boolean) => void;\n}\n\nexport const GeoapifyGeocoderAutocomplete = ({\n  placeholder: placeholderValue,\n  type: typeValue,\n  lang: langValue,\n  limit: limitValue,\n  value: valueValue,\n  filterByCountryCode: filterByCountryCodeValue,\n  filterByCircle: filterByCircleValue,\n  filterByRect: filterByRectValue,\n  filterByPlace: filterByPlaceValue,\n  biasByCountryCode: biasByCountryCodeValue,\n  biasByCircle: biasByCircleValue,\n  biasByRect: biasByRectValue,\n  biasByProximity: biasByProximityValue,\n  position: positionValue,\n  countryCodes: countryCodesValue,\n  debounceDelay: debounceDelayValue,\n  skipIcons: skipIconsValue,\n  skipSelectionOnArrowKey: skipSelectionOnArrowKeyValue,\n  allowNonVerifiedHouseNumber: allowNonVerifiedHouseNumberValue,\n  allowNonVerifiedStreet: allowNonVerifiedStreetValue,\n  addDetails: addDetailsValue,\n  preprocessHook: preprocessHookValue,\n  postprocessHook: postprocessHookValue,\n  suggestionsFilter: suggestionsFilterValue,\n  sendGeocoderRequestFunc: sendGeocoderRequestFuncValue,\n  sendPlaceDetailsRequestFunc: sendPlaceDetailsRequestFuncValue,\n  placeSelect: placeSelectCallback,\n  suggestionsChange: suggestionsChangeCallback,\n  onUserInput: userInputCallback,\n  onOpen: openCallback,\n  onClose: closeCallback,\n}: GeoapifyGeocoderAutocompleteOptions) => {\n  const apiKey = React.useContext<string>(GeoapifyApiKey);\n  let geocoderContainer: HTMLDivElement | null;\n\n  const geocoderAutocomplete: MutableRefObject<\n    GeocoderAutocomplete | undefined\n  > = useRef<GeocoderAutocomplete>();\n\n  const placeSelectCallbackRef: MutableRefObject<\n    ((value: any) => void) | undefined\n  > = useRef<(value: any) => void>();\n\n  const suggestionsChangeCallbackRef: MutableRefObject<\n    ((value: any) => void) | undefined\n  > = useRef<(value: any) => void>();\n\n  const userInputCallbackRef: MutableRefObject<\n    ((input: string) => void) | undefined\n  > = useRef<(input: string) => void>();\n\n  const openCallbackRef: MutableRefObject<\n    ((opened: boolean) => void) | undefined\n  > = useRef<(opened: boolean) => void>();\n\n  const closeCallbackRef: MutableRefObject<\n    ((opened: boolean) => void) | undefined\n  > = useRef<(opened: boolean) => void>();\n\n  placeSelectCallbackRef.current = placeSelectCallback;\n  suggestionsChangeCallbackRef.current =  suggestionsChangeCallback;\n\n  userInputCallbackRef.current = userInputCallback;\n  openCallbackRef.current = openCallback;\n  closeCallbackRef.current = closeCallback;\n\n  const onSelect = React.useCallback((value: any) => {\n    if (placeSelectCallbackRef.current) {\n      placeSelectCallbackRef.current(value);\n    }\n  },[]);\n\n  const onSuggestions = React.useCallback((value: any) => {\n    if (suggestionsChangeCallbackRef.current) {\n      suggestionsChangeCallbackRef.current(value);\n    }\n  },[]);\n\n  const onUserInput = React.useCallback((input: string) => {\n    if (userInputCallbackRef.current) {\n      userInputCallbackRef.current(input);\n    }\n  },[]);\n\n  const onOpen = React.useCallback((opened: boolean) => {\n    if (openCallbackRef.current) {\n      openCallbackRef.current(opened);\n    }\n  },[]);\n\n  const onClose = React.useCallback((opened: boolean) => {\n    if (closeCallbackRef.current) {\n      closeCallbackRef.current(opened);\n    }\n  },[]);\n\n  useEffect(() => {\n    if(!geocoderAutocomplete.current) {\n      geocoderAutocomplete.current = new GeocoderAutocomplete(\n        geocoderContainer as HTMLDivElement,\n        apiKey,\n        {\n          placeholder: placeholderValue || \"\",\n          addDetails: addDetailsValue,\n          skipIcons: skipIconsValue,\n          skipSelectionOnArrowKey: skipSelectionOnArrowKeyValue,\n          allowNonVerifiedHouseNumber: allowNonVerifiedHouseNumberValue,\n          allowNonVerifiedStreet: allowNonVerifiedStreetValue,\n          debounceDelay: debounceDelayValue || 100\n        }\n      );\n    }\n\n    geocoderAutocomplete.current.on(\"select\", onSelect);\n    geocoderAutocomplete.current.on(\"suggestions\", onSuggestions);\n    geocoderAutocomplete.current.on(\"input\", onUserInput);\n    geocoderAutocomplete.current.on(\"close\", onClose);\n    geocoderAutocomplete.current.on(\"open\", onOpen);\n\n    if (sendGeocoderRequestFuncValue) {\n      geocoderAutocomplete.current.setSendGeocoderRequestFunc(sendGeocoderRequestFuncValue)\n    }\n    return () => {\n      if (geocoderAutocomplete.current) {\n        geocoderAutocomplete.current.off(\"select\", onSelect);\n        geocoderAutocomplete.current.off(\"suggestions\", onSuggestions);\n        geocoderAutocomplete.current.off(\"input\", onUserInput);\n        geocoderAutocomplete.current.off(\"close\", onClose);\n        geocoderAutocomplete.current.off(\"open\", onOpen);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setType(typeValue as LocationType);\n    }\n  }, [typeValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setLang(langValue as SupportedLanguage);\n    }\n  }, [langValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      console.warn(\n        \"WARNING! Obsolete function called. The  'position' input has been deprecated, please use the new 'biasByLocation' input instead!\"\n      );\n      geocoderAutocomplete.current.addBiasByProximity(\n        positionValue as GeoPosition\n      );\n    }\n  }, [positionValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      console.warn(\n        \"WARNING! Obsolete function called. The  'countryCodes' input has been deprecated, please use the new 'filterByCountryCode' input instead!\"\n      );\n      geocoderAutocomplete.current.addFilterByCountry(\n        countryCodesValue as CountyCode[]\n      );\n    }\n  }, [countryCodesValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setLimit(limitValue as number);\n    }\n  }, [limitValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setValue((valueValue as string) || \"\");\n    }\n  }, [valueValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addFilterByCountry(\n        filterByCountryCodeValue as ByCountryCodeOptions\n      );\n    }\n  }, [filterByCountryCodeValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addFilterByCircle(\n        filterByCircleValue as ByCircleOptions\n      );\n    }\n  }, [filterByCircleValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addFilterByRect(\n        filterByRectValue as ByRectOptions\n      );\n    }\n  }, [filterByRectValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addFilterByPlace(\n        filterByPlaceValue as string\n      );\n    }\n  }, [filterByRectValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByCountry(\n        biasByCountryCodeValue as ByCountryCodeOptions\n      );\n    }\n  }, [biasByCountryCodeValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByCircle(\n        biasByCircleValue as ByCircleOptions\n      );\n    }\n  }, [biasByCircleValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByRect(\n        biasByRectValue as ByRectOptions\n      );\n    }\n  }, [biasByRectValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByProximity(\n        biasByProximityValue as ByProximityOptions\n      );\n    }\n  }, [biasByProximityValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setPreprocessHook(\n        preprocessHookValue\n      );\n    }\n  }, [preprocessHookValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setPostprocessHook(\n        postprocessHookValue\n      );\n    }\n  }, [postprocessHookValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setSuggestionsFilter(\n        suggestionsFilterValue\n      );\n    }\n  }, [suggestionsFilterValue]);\n\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current && sendGeocoderRequestFuncValue) {\n      geocoderAutocomplete.current.setSendGeocoderRequestFunc(\n        sendGeocoderRequestFuncValue\n      );\n    }\n  }, [sendGeocoderRequestFuncValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current && sendPlaceDetailsRequestFuncValue) {\n      geocoderAutocomplete.current.setSendPlaceDetailsRequestFunc(\n        sendPlaceDetailsRequestFuncValue\n      );\n    }\n  }, [sendPlaceDetailsRequestFuncValue]);\n\n  return (\n    <div\n      className=\"geocoder-container\"\n      style={{ position: \"relative\" }}\n      ref={(el) => (geocoderContainer = el)}\n    ></div>\n  );\n};\n"],"names":["GeoapifyApiKey","React","createContext","GeoapifyContext","props","Provider","value","apiKey","children","GeoapifyGeocoderAutocomplete","placeholderValue","placeholder","typeValue","type","langValue","lang","limitValue","limit","valueValue","filterByCountryCodeValue","filterByCountryCode","filterByCircleValue","filterByCircle","filterByRectValue","filterByRect","filterByPlaceValue","filterByPlace","biasByCountryCodeValue","biasByCountryCode","biasByCircleValue","biasByCircle","biasByRectValue","biasByRect","biasByProximityValue","biasByProximity","positionValue","position","countryCodesValue","countryCodes","debounceDelayValue","debounceDelay","skipIconsValue","skipIcons","skipSelectionOnArrowKeyValue","skipSelectionOnArrowKey","allowNonVerifiedHouseNumberValue","allowNonVerifiedHouseNumber","allowNonVerifiedStreetValue","allowNonVerifiedStreet","addDetailsValue","addDetails","preprocessHookValue","preprocessHook","postprocessHookValue","postprocessHook","suggestionsFilterValue","suggestionsFilter","sendGeocoderRequestFuncValue","sendGeocoderRequestFunc","sendPlaceDetailsRequestFuncValue","sendPlaceDetailsRequestFunc","placeSelectCallback","placeSelect","suggestionsChangeCallback","suggestionsChange","userInputCallback","onUserInput","openCallback","onOpen","closeCallback","onClose","useContext","geocoderContainer","geocoderAutocomplete","useRef","placeSelectCallbackRef","suggestionsChangeCallbackRef","userInputCallbackRef","openCallbackRef","closeCallbackRef","current","onSelect","useCallback","onSuggestions","input","opened","useEffect","GeocoderAutocomplete","on","setSendGeocoderRequestFunc","off","setType","setLang","console","warn","addBiasByProximity","addFilterByCountry","setLimit","setValue","addFilterByCircle","addFilterByRect","addFilterByPlace","addBiasByCountry","addBiasByCircle","addBiasByRect","setPreprocessHook","setPostprocessHook","setSuggestionsFilter","setSendPlaceDetailsRequestFunc","className","style","ref","el"],"mappings":"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"}