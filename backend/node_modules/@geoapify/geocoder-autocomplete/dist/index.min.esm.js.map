{"version":3,"file":"index.min.esm.js","sources":["../src/helpers/constants.ts","../src/helpers/calculation.helper.ts","../src/helpers/dom.helper.ts","../src/helpers/callbacks.ts","../src/autocomplete.ts"],"sourcesContent":["export const BY_COUNTRYCODE = 'countrycode';\nexport const BY_RECT = 'rect';\nexport const BY_CIRCLE = 'circle';\nexport const BY_PROXIMITY = 'proximity';\nexport const BY_PLACE = 'place';\n","import {\n    ByCircleOptions,\n    ByCountryCodeOptions,\n    ByProximityOptions,\n    ByRectOptions,\n    GeocoderAutocompleteOptions\n} from \"../autocomplete\";\nimport { BY_CIRCLE, BY_COUNTRYCODE, BY_PLACE, BY_PROXIMITY, BY_RECT } from \"./constants\";\n\nexport class CalculationHelper {\n    public static isLatitude(num: any) {\n        return num !== '' && num !== null && isFinite(num) && Math.abs(num) <= 90;\n    }\n\n    public static isLongitude(num: any) {\n        return num !== '' && num !== null && isFinite(num) && Math.abs(num) <= 180;\n    }\n\n    public static isNotOpenStreetMapData(feature: any) {\n        return feature.properties.datasource?.sourcename !== 'openstreetmap' || !feature.properties.place_id;\n    }\n\n    public static extendByNonVerifiedValues(options: GeocoderAutocompleteOptions, features: any, parsedAddress: any) {\n        features.forEach((feature: any) => {\n            if (parsedAddress.housenumber &&\n                options.allowNonVerifiedHouseNumber && feature.properties.rank.match_type === \"match_by_street\") {\n                // add housenumber\n                this.addHouseNumberToFormatted(feature.properties, null, parsedAddress.housenumber)\n                feature.properties.nonVerifiedParts = [\"housenumber\"];\n            } else if (parsedAddress.street && parsedAddress.housenumber &&\n                options.allowNonVerifiedStreet &&\n                (feature.properties.rank.match_type === \"match_by_city_or_disrict\" || feature.properties.rank.match_type === \"match_by_postcode\")) {\n                // add housenumber and street\n                this.addHouseNumberToFormatted(feature.properties, parsedAddress.street, parsedAddress.housenumber)\n                feature.properties.nonVerifiedParts = [\"housenumber\", \"street\"];\n            } else if (parsedAddress.street &&\n                options.allowNonVerifiedStreet &&\n                (feature.properties.rank.match_type === \"match_by_city_or_disrict\" || feature.properties.rank.match_type === \"match_by_postcode\")) {\n                // add street\n                feature.properties.street = parsedAddress.street.replace(/(^\\w|\\s\\w|[-]\\w)/g, (m: string) => m.toUpperCase());\n\n                feature.properties.address_line1 = feature.properties.street;\n                feature.properties.address_line2 = feature.properties.formatted;\n\n                feature.properties.formatted = feature.properties.street + \", \" + feature.properties.formatted;\n                feature.properties.nonVerifiedParts = [\"street\"];\n            }\n        });\n    }\n\n    private static addHouseNumberToFormatted(featureProperties: any, street: string, housenumber: string) {\n        const houseNumberAndStreetFormatsPerCountry: { [key: string]: string[] } = {\n            \"{{{road}}} {{{house_number}}}\": [\"af\", \"ai\", \"al\", \"ao\", \"ar\", \"at\", \"aw\", \"ax\", \"ba\", \"be\", \"bg\", \"bi\", \"bo\", \"bq\", \"br\", \"bs\", \"bt\", \"bv\", \"bw\", \"cf\", \"ch\", \"cl\", \"cm\", \"co\", \"cr\", \"cu\", \"cv\", \"cw\", \"cy\", \"cz\", \"de\", \"dk\", \"do\", \"ec\", \"ee\", \"eh\", \"er\", \"et\", \"fi\", \"fo\", \"gd\", \"ge\", \"gl\", \"gq\", \"gr\", \"gt\", \"gw\", \"hn\", \"hr\", \"ht\", \"hu\", \"id\", \"il\", \"ir\", \"is\", \"jo\", \"ki\", \"km\", \"kp\", \"kw\", \"lc\", \"li\", \"lr\", \"lt\", \"lv\", \"ly\", \"me\", \"mk\", \"ml\", \"mn\", \"mo\", \"mx\", \"ni\", \"nl\", \"no\", \"np\", \"pa\", \"pe\", \"pl\", \"ps\", \"pt\", \"pw\", \"py\", \"qa\", \"ro\", \"rs\", \"ru\", \"sb\", \"sd\", \"se\", \"si\", \"sj\", \"sk\", \"so\", \"sr\", \"ss\", \"st\", \"sv\", \"sx\", \"sz\", \"td\", \"tj\", \"tl\", \"tr\", \"um\", \"uz\", \"uy\", \"vc\", \"ve\", \"vu\", \"ws\"],\n            \"{{{house_number}}} {{{road}}}\": [\"ad\", \"ae\", \"ag\", \"am\", \"as\", \"au\", \"az\", \"bb\", \"bd\", \"bf\", \"bh\", \"bl\", \"bm\", \"bz\", \"ca\", \"cc\", \"ci\", \"ck\", \"cn\", \"cx\", \"dj\", \"dm\", \"dz\", \"eg\", \"fj\", \"fk\", \"fm\", \"fr\", \"ga\", \"gb\", \"gf\", \"gg\", \"gh\", \"gi\", \"gm\", \"gn\", \"gp\", \"gs\", \"gu\", \"gy\", \"hk\", \"hm\", \"ie\", \"im\", \"io\", \"iq\", \"je\", \"jm\", \"jp\", \"ke\", \"kh\", \"kn\", \"kr\", \"ky\", \"lb\", \"lk\", \"ls\", \"lu\", \"ma\", \"mc\", \"mf\", \"mh\", \"mg\", \"mm\", \"mp\", \"ms\", \"mt\", \"mq\", \"mv\", \"mw\", \"my\", \"na\", \"nc\", \"ne\", \"nf\", \"ng\", \"nr\", \"nu\", \"nz\", \"om\", \"pf\", \"pg\", \"ph\", \"pk\", \"pm\", \"pr\", \"re\", \"rw\", \"sa\", \"sc\", \"sg\", \"sh\", \"sl\", \"sn\", \"tc\", \"tf\", \"th\", \"tk\", \"tn\", \"to\", \"tt\", \"tv\", \"tw\", \"tz\", \"ug\", \"us\", \"vg\", \"vi\", \"wf\", \"yt\", \"za\", \"zm\", \"zw\"],\n            \"{{{road}}}, {{{house_number}}}\": [\"by\", \"es\", \"it\", \"kg\", \"kz\", \"md\", \"mz\", \"sm\", \"sy\", \"ua\", \"va\"],\n            \"{{{house_number}}}, {{{road}}}\": [\"bj\", \"bn\", \"cd\", \"cg\", \"in\", \"la\", \"mr\", \"mu\", \"tg\", \"tm\", \"vn\", \"ye\"]\n        }\n\n        const format = Object.keys(houseNumberAndStreetFormatsPerCountry).find(key => houseNumberAndStreetFormatsPerCountry[key].indexOf(featureProperties.country_code) >= 0) || \"{{{road}}} {{{house_number}}}\";\n\n        if (street) {\n            // add street and housenumber\n            featureProperties.street = street.replace(/(^\\w|\\s\\w|[-]\\w)/g, m => m.toUpperCase());\n\n            featureProperties.housenumber = housenumber;\n            const addressPart = format.replace(\"{{{road}}}\", featureProperties.street).replace(\"{{{house_number}}}\", housenumber);\n            featureProperties.address_line1 = addressPart;\n            featureProperties.address_line2 = featureProperties.formatted;\n\n            featureProperties.formatted = addressPart + \", \" + featureProperties.formatted;\n        } else {\n            // add house number only\n            featureProperties.housenumber = housenumber;\n            const addressPart = format.replace(\"{{{road}}}\", featureProperties.street).replace(\"{{{house_number}}}\", housenumber);\n\n            featureProperties.address_line1 = featureProperties.address_line1.replace(featureProperties.street, addressPart);;\n            featureProperties.formatted = featureProperties.formatted.replace(featureProperties.street, addressPart);\n        }\n    }\n\n    public static generatePlacesUrl(placeDetailsUrl: string,\n                                    placeId: string,\n                                    apiKey: string,\n                                    options: GeocoderAutocompleteOptions): string {\n        let url = `${placeDetailsUrl}?id=${placeId}&apiKey=${apiKey}`;\n        if (options.lang) {\n            url += `&lang=${options.lang}`;\n        }\n        return url;\n    }\n\n    public static needToFilterDataBySuggestionsFilter(currentItems: any, suggestionsFilter?: (suggetions: any[]) => any[]) {\n        return currentItems && currentItems.length && suggestionsFilter && typeof suggestionsFilter === 'function';\n    }\n\n    public static needToCalculateExtendByNonVerifiedValues(data: any,\n                                                           options: GeocoderAutocompleteOptions) {\n        return data.features && data.features.length &&\n            data?.query?.parsed &&\n            (options.allowNonVerifiedHouseNumber || options.allowNonVerifiedStreet);\n    }\n\n    public static generateUrl(value: string,\n                              geocoderUrl: string,\n                              apiKey: string,\n                              options: GeocoderAutocompleteOptions): string {\n        let url = `${geocoderUrl}?text=${encodeURIComponent(value)}&apiKey=${apiKey}`;\n        // Add type of the location if set. Learn more about possible parameters on https://apidocs.geoapify.com/docs/geocoding/api/api\n        if (options.type) {\n            url += `&type=${options.type}`;\n        }\n\n        if (options.limit) {\n            url += `&limit=${options.limit}`;\n        }\n\n        if (options.lang) {\n            url += `&lang=${options.lang}`;\n        }\n\n        const filters = [];\n        const filterByCountryCodes: ByCountryCodeOptions = options.filter[BY_COUNTRYCODE] as ByCountryCodeOptions;\n        const filterByCircle: ByCircleOptions = options.filter[BY_CIRCLE] as ByCircleOptions;\n        const filterByRect: ByRectOptions = options.filter[BY_RECT] as ByRectOptions;\n        const filterByPlace: string = options.filter[BY_PLACE] as string;\n\n        if (filterByCountryCodes && filterByCountryCodes.length) {\n            filters.push(`countrycode:${filterByCountryCodes.join(',').toLowerCase()}`);\n        }\n\n        if (filterByCircle && CalculationHelper.isLatitude(filterByCircle.lat) && CalculationHelper.isLongitude(filterByCircle.lon) && filterByCircle.radiusMeters > 0) {\n            filters.push(`circle:${filterByCircle.lon},${filterByCircle.lat},${filterByCircle.radiusMeters}`);\n        }\n\n        if (filterByRect && CalculationHelper.isLatitude(filterByRect.lat1) && CalculationHelper.isLongitude(filterByRect.lon1) && CalculationHelper.isLatitude(filterByRect.lat2) && CalculationHelper.isLongitude(filterByRect.lon2)) {\n            filters.push(`rect:${filterByRect.lon1},${filterByRect.lat1},${filterByRect.lon2},${filterByRect.lat2}`);\n        }\n\n        if (filterByPlace) {\n            filters.push(`place:${filterByPlace}`);\n        }\n\n\n        url += filters.length ? `&filter=${filters.join('|')}` : '';\n\n        const bias = [];\n        const biasByCountryCodes: ByCountryCodeOptions = options.bias[BY_COUNTRYCODE] as ByCountryCodeOptions;\n        const biasByCircle: ByCircleOptions = options.bias[BY_CIRCLE] as ByCircleOptions;\n        const biasByRect: ByRectOptions = options.bias[BY_RECT] as ByRectOptions;\n        const biasByProximity: ByProximityOptions = options.bias[BY_PROXIMITY] as ByProximityOptions;\n\n        if (biasByCountryCodes && biasByCountryCodes.length) {\n            bias.push(`countrycode:${biasByCountryCodes.join(',').toLowerCase()}`);\n        }\n\n        if (biasByCircle && CalculationHelper.isLatitude(biasByCircle.lat) && CalculationHelper.isLongitude(biasByCircle.lon) && biasByCircle.radiusMeters > 0) {\n            bias.push(`circle:${biasByCircle.lon},${biasByCircle.lat},${biasByCircle.radiusMeters}`);\n        }\n\n        if (biasByRect && CalculationHelper.isLatitude(biasByRect.lat1) && CalculationHelper.isLongitude(biasByRect.lon1) && CalculationHelper.isLatitude(biasByRect.lat2) && CalculationHelper.isLongitude(biasByRect.lon2)) {\n            bias.push(`rect:${biasByRect.lon1},${biasByRect.lat1},${biasByRect.lon2},${biasByRect.lat2}`);\n        }\n\n        if (biasByProximity && CalculationHelper.isLatitude(biasByProximity.lat) && CalculationHelper.isLongitude(biasByProximity.lon)) {\n            bias.push(`proximity:${biasByProximity.lon},${biasByProximity.lat}`);\n        }\n\n        url += bias.length ? `&bias=${bias.join('|')}` : '';\n\n        return url;\n    }\n\n    public static returnIfFunction(func: any) {\n        if(func && typeof func === 'function') {\n            return func;\n        } else {\n            return null;\n        }\n    }\n}","import { GeocoderAutocompleteOptions } from \"../autocomplete\";\nimport countiesData from \"../countries.json\";\n\nexport class DomHelper {\n    public static createInputElement(inputElement: HTMLInputElement,\n                                      options: GeocoderAutocompleteOptions,\n                                      container: HTMLElement) {\n        inputElement.classList.add(\"geoapify-autocomplete-input\");\n        inputElement.setAttribute(\"type\", \"text\");\n        inputElement.setAttribute(\"placeholder\", options.placeholder || \"Enter an address here\");\n        container.appendChild(inputElement);\n    }\n\n    public static addFeatureIcon(element: HTMLElement, type: string, countryCode: string) {\n        const iconMap: any = {\n            'unknown': 'map-marker',\n            'amenity': 'map-marker',\n            'building': 'map-marker',\n            'street': 'road',\n            'suburb': 'city',\n            'district': 'city',\n            'postcode': 'city',\n            'city': 'city',\n            'county': 'city',\n            'state': 'city'\n        };\n\n        const countryData = countiesData.find(county => countryCode && county.code.toLowerCase() === countryCode.toLowerCase());\n\n        if ((type === 'country') && countryData) {\n            element.classList.add(\"emoji\");\n            const emojiElement = document.createElement('span');\n            emojiElement.innerText = countryData.emoji;\n            element.appendChild(emojiElement);\n        } else if (iconMap[type]) {\n            this.addIcon(element, iconMap[type])\n        } else {\n            this.addIcon(element, 'map-marker');\n        }\n    }\n\n    public static addIcon(element: HTMLElement, icon: string) {\n\n        //FortAwesome icons 5. Licence - https://fontawesome.com/license/free\n\n        const icons: { [key: string]: any } = {\n            \"close\": {\n                path: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\",\n                viewbox: \"0 0 24 24\"\n            },\n            \"map-marker\": {\n                path: \"M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0zM192 272c44.183 0 80-35.817 80-80s-35.817-80-80-80-80 35.817-80 80 35.817 80 80 80z\",\n                viewbox: \"0 0 384 512\"\n            },\n            \"road\": {\n                path: \"M573.19 402.67l-139.79-320C428.43 71.29 417.6 64 405.68 64h-97.59l2.45 23.16c.5 4.72-3.21 8.84-7.96 8.84h-29.16c-4.75 0-8.46-4.12-7.96-8.84L267.91 64h-97.59c-11.93 0-22.76 7.29-27.73 18.67L2.8 402.67C-6.45 423.86 8.31 448 30.54 448h196.84l10.31-97.68c.86-8.14 7.72-14.32 15.91-14.32h68.8c8.19 0 15.05 6.18 15.91 14.32L348.62 448h196.84c22.23 0 36.99-24.14 27.73-45.33zM260.4 135.16a8 8 0 0 1 7.96-7.16h39.29c4.09 0 7.53 3.09 7.96 7.16l4.6 43.58c.75 7.09-4.81 13.26-11.93 13.26h-40.54c-7.13 0-12.68-6.17-11.93-13.26l4.59-43.58zM315.64 304h-55.29c-9.5 0-16.91-8.23-15.91-17.68l5.07-48c.86-8.14 7.72-14.32 15.91-14.32h45.15c8.19 0 15.05 6.18 15.91 14.32l5.07 48c1 9.45-6.41 17.68-15.91 17.68z\",\n                viewbox: \"0 0 576 512\"\n            },\n            \"city\": {\n                path: \"M616 192H480V24c0-13.26-10.74-24-24-24H312c-13.26 0-24 10.74-24 24v72h-64V16c0-8.84-7.16-16-16-16h-16c-8.84 0-16 7.16-16 16v80h-64V16c0-8.84-7.16-16-16-16H80c-8.84 0-16 7.16-16 16v80H24c-13.26 0-24 10.74-24 24v360c0 17.67 14.33 32 32 32h576c17.67 0 32-14.33 32-32V216c0-13.26-10.75-24-24-24zM128 404c0 6.63-5.37 12-12 12H76c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12H76c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12H76c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm128 192c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm160 96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12V76c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm160 288c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40z\",\n                viewbox: \"0 0 640 512\"\n            }\n        }\n\n        var svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", 'svg');\n        svgElement.setAttribute('viewBox', icons[icon].viewbox);\n        svgElement.setAttribute('height', \"24\");\n\n        var iconElement = document.createElementNS(\"http://www.w3.org/2000/svg\", 'path');\n        iconElement.setAttribute(\"d\", icons[icon].path);\n        iconElement.setAttribute('fill', 'currentColor');\n        svgElement.appendChild(iconElement);\n        element.appendChild(svgElement);\n    }\n\n    public static  getStyledAddressSingleValue(value: string, currentValue: string): string {\n        let displayValue = value;\n\n        const valueIndex = (displayValue || '').toLowerCase().indexOf(currentValue.toLowerCase());\n        if (valueIndex >= 0) {\n            displayValue = displayValue.substring(0, valueIndex) +\n                `<strong>${displayValue.substring(valueIndex, valueIndex + currentValue.length)}</strong>` +\n                displayValue.substring(valueIndex + currentValue.length);\n        }\n\n        return `<span class=\"main-part\">${displayValue}</span>`\n    }\n\n    public static getStyledAddress(featureProperties: any, currentValue: string): string {\n        let mainPart: string;\n        let secondaryPart: string;\n        const parts = featureProperties.formatted.split(',').map((part: string) => part.trim());\n\n        if (featureProperties.name) {\n            mainPart = parts[0];\n            secondaryPart = parts.slice(1).join(', ');\n        } else {\n            const mainElements = Math.min(2, Math.max(parts.length - 2, 1));\n            mainPart = parts.slice(0, mainElements).join(', ');\n            secondaryPart = parts.slice(mainElements).join(', ');\n        }\n\n        if (featureProperties.nonVerifiedParts && featureProperties.nonVerifiedParts.length) {\n            featureProperties.nonVerifiedParts.forEach((part: string) => {\n                mainPart = mainPart.replace(featureProperties[part], `<span class=\"non-verified\">${featureProperties[part]}</span>`);\n            });\n        } else {\n            const valueIndex = mainPart.toLowerCase().indexOf(currentValue.toLowerCase());\n            if (valueIndex >= 0) {\n                mainPart = mainPart.substring(0, valueIndex) +\n                    `<strong>${mainPart.substring(valueIndex, valueIndex + currentValue.length)}</strong>` +\n                    mainPart.substring(valueIndex + currentValue.length);\n\n            }\n        }\n\n        return `<span class=\"main-part\">${mainPart}</span><span class=\"secondary-part\">${secondaryPart}</span>`\n    }\n\n    public static addDropdownIcon(feature: any, itemElement: HTMLDivElement) {\n        const iconElement = document.createElement(\"span\");\n        iconElement.classList.add('icon');\n\n        DomHelper.addFeatureIcon(iconElement, feature.properties.result_type, feature.properties.country_code);\n\n        itemElement.appendChild(iconElement);\n    }\n\n    public static addActiveClassToDropdownItem(items: HTMLCollectionOf<HTMLDivElement>, index: number) {\n        for (var i = 0; i < items.length; i++) {\n            items[i].classList.remove(\"active\");\n        }\n\n        /* Add class \"autocomplete-active\" to the active element*/\n        items[index].classList.add(\"active\");\n    }\n\n    public static createDropdownItemText() {\n        const textElement = document.createElement(\"span\");\n        textElement.classList.add('address');\n        return textElement;\n    }\n\n    public static createDropdownItem() {\n        const itemElement = document.createElement(\"div\");\n        itemElement.classList.add('geoapify-autocomplete-item');\n        return itemElement;\n    }\n}","export class Callbacks {\n    public changeCallbacks: ((selectedOption: any) => void)[] = [];\n    public suggestionsChangeCallbacks: ((options: any[]) => void)[] = [];\n    public inputCallbacks: ((input: string) => void)[] = [];\n    public openCallbacks: ((opened: boolean) => void)[] = [];\n    public closeCallbacks: ((opened: boolean) => void)[] = [];\n\n    addCallback(operation: 'select' | 'suggestions' | 'input' | 'close' | 'open', callback: (param: any) => void) {\n        let currentCallbacks = this.getCallbacksByOperation(operation);\n        if(currentCallbacks) {\n            if (currentCallbacks.indexOf(callback) < 0) {\n                currentCallbacks.push(callback);\n            }\n        }\n    }\n\n    removeCallback(operation: 'select' | 'suggestions' | 'input' | 'close' | 'open', callback?: (param: any) => any) {\n        let currentCallbacks = this.getCallbacksByOperation(operation);\n        if(currentCallbacks) {\n            if (currentCallbacks.indexOf(callback) >= 0) {\n                currentCallbacks.splice(currentCallbacks.indexOf(callback), 1);\n                this.setCallbacksByOperation(operation, currentCallbacks);\n            } else if (!callback) {\n                this.setCallbacksByOperation(operation, []);\n            }\n        }\n    }\n\n    notifyInputChange(currentValue: string) {\n        this.inputCallbacks.forEach(callback => callback(currentValue));\n    }\n\n    notifyChange(feature: any){\n        this.changeCallbacks.forEach(callback => callback(feature));\n    }\n\n    notifySuggestions(features: any) {\n        this.suggestionsChangeCallbacks.forEach(callback => callback(features));\n    }\n\n    notifyOpened() {\n        this.openCallbacks.forEach(callback => callback(true));\n    }\n\n    notifyClosed() {\n        this.closeCallbacks.forEach(callback => callback(false));\n    }\n\n    private getCallbacksByOperation(operation: \"select\" | \"suggestions\" | \"input\" | \"close\" | \"open\") {\n        let currentCallbacks = null;\n        switch (operation) {\n            case 'select': {\n                currentCallbacks = this.changeCallbacks;\n                break;\n            }\n            case 'suggestions': {\n                currentCallbacks = this.suggestionsChangeCallbacks;\n                break;\n            }\n            case 'input': {\n                currentCallbacks = this.inputCallbacks;\n                break;\n            }\n            case 'close': {\n                currentCallbacks = this.closeCallbacks;\n                break;\n            }\n            case 'open': {\n                currentCallbacks = this.openCallbacks;\n                break;\n            }\n        }\n        return currentCallbacks;\n    }\n\n    private setCallbacksByOperation(operation: \"select\" | \"suggestions\" | \"input\" | \"close\" | \"open\",\n                                    callbacks: ((data: any) => void)[]) {\n        switch (operation) {\n            case 'select': {\n                this.changeCallbacks = callbacks;\n                break;\n            }\n            case 'suggestions': {\n                this.suggestionsChangeCallbacks = callbacks;\n                break;\n            }\n            case 'input': {\n                this.inputCallbacks = callbacks;\n                break;\n            }\n            case 'close': {\n                this.closeCallbacks = callbacks;\n                break;\n            }\n            case 'open': {\n                this.openCallbacks = callbacks;\n                break;\n            }\n        }\n    }\n}","import { CalculationHelper } from \"./helpers/calculation.helper\";\nimport { DomHelper } from \"./helpers/dom.helper\";\nimport {\n    BY_CIRCLE,\n    BY_COUNTRYCODE,\n    BY_PLACE,\n    BY_PROXIMITY,\n    BY_RECT\n} from \"./helpers/constants\";\nimport { Callbacks } from \"./helpers/callbacks\";\n\nexport class GeocoderAutocomplete {\n\n    private inputElement: HTMLInputElement;\n    private inputClearButton: HTMLElement;\n    private autocompleteItemsElement: HTMLElement = null;\n\n    /* Focused item in the autocomplete list. This variable is used to navigate with buttons */\n    private focusedItemIndex: number;\n\n    /* Current autocomplete items data (GeoJSON.Feature) */\n    private currentItems: any;\n\n    /* Active request promise reject function. To be able to cancel the promise when a new request comes */\n    private currentPromiseReject: any;\n\n    /* Active place details request promise reject function */\n    private currentPlaceDetailsPromiseReject: any;\n\n    /* We set timeout before sending a request to avoid unnecessary calls */\n    private currentTimeout: number;\n\n    private callbacks = new Callbacks();\n\n    private preprocessHook?: (value: string) => string;\n    private postprocessHook?: (feature: any) => string;\n    private suggestionsFilter?: (suggetions: any[]) => any[];\n\n    private sendGeocoderRequestAlt?: (value: string, geocoderAutocomplete: GeocoderAutocomplete) => Promise<any>;\n    private sendPlaceDetailsRequestAlt?: (feature: any, geocoderAutocomplete: GeocoderAutocomplete) => Promise<any>;\n\n    private geocoderUrl = \"https://api.geoapify.com/v1/geocode/autocomplete\";\n    private placeDetailsUrl = \"https://api.geoapify.com/v2/place-details\";\n\n    private options: GeocoderAutocompleteOptions = {\n        limit: 5,\n        debounceDelay: 100\n    };\n\n    constructor(private container: HTMLElement, private apiKey: string, options?: GeocoderAutocompleteOptions) {\n        this.constructOptions(options);\n\n        this.inputElement = document.createElement(\"input\");\n        DomHelper.createInputElement(this.inputElement, this.options, this.container);\n\n        this.addClearButton();\n\n        this.addEventListeners();\n    }\n\n    public setGeocoderUrl(geocoderUrl: string) {\n        this.geocoderUrl = geocoderUrl;\n    }\n\n    public setPlaceDetailsUrl(placeDetailsUrl: string) {\n        this.placeDetailsUrl = placeDetailsUrl;\n    }\n\n    public setType(type: 'country' | 'state' | 'city' | 'postcode' | 'street' | 'amenity') {\n        this.options.type = type;\n    }\n\n    public setLang(lang: SupportedLanguage) {\n        this.options.lang = lang;\n    }\n\n    public setAddDetails(addDetails: boolean) {\n        this.options.addDetails = addDetails;\n    }\n\n    public setSkipIcons(skipIcons: boolean) {\n        this.options.skipIcons = skipIcons;\n    }\n\n    public setAllowNonVerifiedHouseNumber(allowNonVerifiedHouseNumber: boolean) {\n        this.options.allowNonVerifiedHouseNumber = allowNonVerifiedHouseNumber;\n    }\n\n    public setAllowNonVerifiedStreet(allowNonVerifiedStreet: boolean) {\n        this.options.allowNonVerifiedStreet = allowNonVerifiedStreet;\n    }\n\n    public setCountryCodes(codes: CountyCode[]) {\n        console.warn(\"WARNING! Obsolete function called. Function setCountryCodes() has been deprecated, please use the new addFilterByCountry() function instead!\");\n        this.options.countryCodes = codes;\n    }\n\n    public setPosition(position: GeoPosition) {\n        console.warn(\"WARNING! Obsolete function called. Function setPosition() has been deprecated, please use the new addBiasByProximity() function instead!\");\n        this.options.position = position;\n    }\n\n    public setLimit(limit: number) {\n        this.options.limit = limit;\n    }\n\n    public setValue(value: string) {\n        if (!value) {\n            this.inputClearButton.classList.remove(\"visible\");\n        } else {\n            this.inputClearButton.classList.add(\"visible\");\n        }\n\n        this.inputElement.value = value;\n    }\n\n    public getValue() {\n        return this.inputElement.value;\n    }\n\n    public addFilterByCountry(codes: ByCountryCodeOptions) {\n        this.options.filter[BY_COUNTRYCODE] = codes;\n    }\n\n    public addFilterByCircle(filterByCircle: ByCircleOptions) {\n        this.options.filter[BY_CIRCLE] = filterByCircle;\n    }\n\n    public addFilterByRect(filterByRect: ByRectOptions) {\n        this.options.filter[BY_RECT] = filterByRect;\n    }\n\n    public addFilterByPlace(filterByPlace: string) {\n        this.options.filter[BY_PLACE] = filterByPlace;\n    }\n\n    public clearFilters() {\n        this.options.filter = {};\n    }\n\n    public addBiasByCountry(codes: ByCountryCodeOptions) {\n        this.options.bias[BY_COUNTRYCODE] = codes;\n    }\n\n    public addBiasByCircle(biasByCircle: ByCircleOptions) {\n        this.options.bias[BY_CIRCLE] = biasByCircle;\n    }\n\n    public addBiasByRect(biasByRect: ByRectOptions) {\n        this.options.bias[BY_RECT] = biasByRect;\n    }\n\n    public addBiasByProximity(biasByProximity: ByProximityOptions) {\n        this.options.bias[BY_PROXIMITY] = biasByProximity;\n    }\n\n    public clearBias() {\n        this.options.bias = {};\n    }\n\n    public on(operation: 'select' | 'suggestions' | 'input' | 'close' | 'open', callback: (param: any) => void) {\n        this.callbacks.addCallback(operation, callback);\n    }\n\n    public off(operation: 'select' | 'suggestions' | 'input' | 'close' | 'open', callback?: (param: any) => any) {\n        this.callbacks.removeCallback(operation, callback);\n    }\n\n    public once(operation: 'select' | 'suggestions' | 'input' | 'close' | 'open', callback: (param: any) => any) {\n        this.on(operation, callback);\n\n        const current = this;\n        const currentListener = () => {\n            current.off(operation, callback);\n            current.off(operation, currentListener);\n        }\n\n        this.on(operation, currentListener);\n    }\n\n    public setSuggestionsFilter(suggestionsFilterFunc?: (suggestions: any[]) => any[]) {\n        this.suggestionsFilter = CalculationHelper.returnIfFunction(suggestionsFilterFunc);\n    }\n\n    public setPreprocessHook(preprocessHookFunc?: (value: string) => string) {\n        this.preprocessHook = CalculationHelper.returnIfFunction(preprocessHookFunc);\n    }\n\n    public setPostprocessHook(postprocessHookFunc?: (value: string) => string) {\n        this.postprocessHook = CalculationHelper.returnIfFunction(postprocessHookFunc);\n    }\n\n    public setSendGeocoderRequestFunc(sendGeocoderRequestFunc: (value: string, geocoderAutocomplete: GeocoderAutocomplete) => Promise<any>) {\n        this.sendGeocoderRequestAlt = CalculationHelper.returnIfFunction(sendGeocoderRequestFunc);\n    }\n\n    public setSendPlaceDetailsRequestFunc(sendPlaceDetailsRequestFunc: (feature: any, geocoderAutocomplete: GeocoderAutocomplete) => Promise<any>) {\n        this.sendPlaceDetailsRequestAlt = CalculationHelper.returnIfFunction(sendPlaceDetailsRequestFunc);\n    }\n\n    public isOpen(): boolean {\n        return !!this.autocompleteItemsElement;\n    }\n\n    public close() {\n        this.closeDropDownList();\n    }\n\n    public open() {\n        if (!this.isOpen()) {\n            this.openDropdownAgain();\n        }\n    }\n\n    private sendGeocoderRequestOrAlt(currentValue: string): Promise<any> {\n        if (this.sendGeocoderRequestAlt) {\n            return this.sendGeocoderRequestAlt(currentValue, this);\n        } else {\n            return this.sendGeocoderRequest(currentValue);\n        }\n\n    }\n\n    public sendGeocoderRequest(value: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.currentPromiseReject = reject;\n\n            let url = CalculationHelper.generateUrl(value, this.geocoderUrl, this.apiKey, this.options);\n\n            fetch(url)\n                .then((response) => {\n                    if (response.ok) {\n                        response.json().then(data => resolve(data));\n                    } else {\n                        response.json().then(data => reject(data));\n                    }\n                });\n        });\n    }\n\n    public sendPlaceDetailsRequest(feature: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n\n            if (CalculationHelper.isNotOpenStreetMapData(feature)) {\n                // only OSM data has detailed information; return the original object if the source is different from OSM\n                resolve(feature);\n                return;\n            }\n            \n            this.currentPlaceDetailsPromiseReject = reject;\n            let url = CalculationHelper.generatePlacesUrl(this.placeDetailsUrl, feature.properties.place_id, this.apiKey, this.options);\n\n            fetch(url)\n                .then((response) => {\n                    if (response.ok) {\n                        response.json().then(data => {\n                            if (!data.features.length) {\n                                resolve(feature);\n                            }\n\n                            resolve(data.features[0]);\n                        });\n                    } else {\n                        response.json().then(data => reject(data));\n                    }\n                });\n        });\n    }\n\n    /* Execute a function when someone writes in the text field: */\n    onUserInput(event: Event) {\n        let currentValue = this.inputElement.value;\n        let userEnteredValue = this.inputElement.value;\n\n        this.callbacks.notifyInputChange(currentValue);\n\n        /* Close any already open dropdown list */\n        this.closeDropDownList();\n\n        this.focusedItemIndex = -1;\n\n        this.cancelPreviousRequest();\n\n        this.cancelPreviousTimeout();\n\n        if (!currentValue) {\n            this.removeClearButton();\n            return false;\n        }\n\n        this.showClearButton();\n\n        this.currentTimeout = window.setTimeout(() => {\n            /* Create a new promise and send geocoding request */\n            if (CalculationHelper.returnIfFunction(this.preprocessHook)) {\n                currentValue = this.preprocessHook(currentValue);\n            }\n\n            let promise = this.sendGeocoderRequestOrAlt(currentValue);\n\n            promise.then((data: any) => {\n                this.onDropdownDataLoad(data, userEnteredValue, event);\n            }, (err) => {\n                if (!err.canceled) {\n                    console.log(err);\n                }\n            });\n        }, this.options.debounceDelay);\n    }\n\n    private onDropdownDataLoad(data: any, userEnteredValue: string, event: Event) {\n        if (CalculationHelper.needToCalculateExtendByNonVerifiedValues(data, this.options)) {\n            CalculationHelper.extendByNonVerifiedValues(this.options, data.features, data?.query?.parsed);\n        }\n\n        this.currentItems = data.features;\n\n        if (CalculationHelper.needToFilterDataBySuggestionsFilter(this.currentItems, this.suggestionsFilter)) {\n            this.currentItems = this.suggestionsFilter(this.currentItems);\n        }\n\n        this.callbacks.notifySuggestions(this.currentItems);\n\n        if (!this.currentItems.length) {\n            return;\n        }\n\n        this.createDropdown();\n\n        this.currentItems.forEach((feature: any, index: number) => {\n            this.populateDropdownItem(feature, userEnteredValue, event, index);\n        });\n    }\n\n    private populateDropdownItem(feature: any, userEnteredValue: string, event: Event, index: number) {\n        /* Create a DIV element for each element: */\n        const itemElement = DomHelper.createDropdownItem();\n\n        if (!this.options.skipIcons) {\n            DomHelper.addDropdownIcon(feature, itemElement);\n        }\n\n        const textElement = DomHelper.createDropdownItemText();\n\n        if (CalculationHelper.returnIfFunction(this.postprocessHook)) {\n            const value = this.postprocessHook(feature);\n            textElement.innerHTML = DomHelper.getStyledAddressSingleValue(value, userEnteredValue);\n        } else {\n            textElement.innerHTML = DomHelper.getStyledAddress(feature.properties, userEnteredValue);\n        }\n\n        itemElement.appendChild(textElement);\n        this.addEventListenerOnDropdownClick(itemElement, event, index);\n        this.autocompleteItemsElement.appendChild(itemElement);\n    }\n\n    private addEventListenerOnDropdownClick(itemElement: HTMLDivElement, event: Event, index: number) {\n        itemElement.addEventListener(\"click\", (e) => {\n            event.stopPropagation();\n            this.setValueAndNotify(this.currentItems[index])\n        });\n    }\n\n    private createDropdown() {\n        /*create a DIV element that will contain the items (values):*/\n        this.autocompleteItemsElement = document.createElement(\"div\");\n        this.autocompleteItemsElement.setAttribute(\"class\", \"geoapify-autocomplete-items\");\n\n        this.callbacks.notifyOpened();\n\n        /* Append the DIV element as a child of the autocomplete container:*/\n        this.container.appendChild(this.autocompleteItemsElement);\n    }\n\n    private cancelPreviousTimeout() {\n        if (this.currentTimeout) {\n            window.clearTimeout(this.currentTimeout);\n            this.currentTimeout = null;\n        }\n    }\n\n    private cancelPreviousRequest() {\n        if (this.currentPromiseReject) {\n            this.currentPromiseReject({\n                canceled: true\n            });\n            this.currentPromiseReject = null;\n        }\n    }\n\n    private addEventListeners() {\n        this.inputElement.addEventListener('input', this.onUserInput.bind(this), false);\n        this.inputElement.addEventListener('keydown', this.onUserKeyPress.bind(this), false);\n\n        document.addEventListener(\"click\", (event) => {\n            if (event.target !== this.inputElement) {\n                this.closeDropDownList();\n            } else if (!this.autocompleteItemsElement) {\n                // open dropdown list again\n                this.openDropdownAgain();\n            }\n        });\n    }\n\n    private showClearButton() {\n        this.inputClearButton.classList.add(\"visible\");\n    }\n\n    private removeClearButton() {\n        this.inputClearButton.classList.remove(\"visible\");\n    }\n\n    private onUserKeyPress(event: KeyboardEvent) {\n        if (this.autocompleteItemsElement) {\n            const itemElements: HTMLCollectionOf<HTMLDivElement> = this.autocompleteItemsElement.getElementsByTagName(\"div\");\n            if (event.code === 'ArrowDown') {\n                this.handleArrowDownEvent(event, itemElements);\n            } else if (event.code === 'ArrowUp') {\n                this.handleArrowUpEvent(event, itemElements);\n            } else if (event.code === \"Enter\") {\n                this.handleEnterEvent(event);\n            } else if (event.code === \"Escape\") {\n                /* If the ESC key is presses, close the list */\n                this.closeDropDownList();\n            }\n        } else {\n            if (event.code == 'ArrowDown') {\n                /* Open dropdown list again */\n                this.openDropdownAgain();\n            }\n        }\n    }\n\n    private handleEnterEvent(event: KeyboardEvent) {\n        /* If the ENTER key is pressed and value as selected, close the list*/\n        event.preventDefault();\n        if (this.focusedItemIndex > -1) {\n            if (this.options.skipSelectionOnArrowKey) {\n                // select the location if it wasn't selected by navigation\n                this.setValueAndNotify(this.currentItems[this.focusedItemIndex]);\n            } else {\n                this.closeDropDownList();\n            }\n        }\n    }\n\n    private handleArrowUpEvent(event: KeyboardEvent, itemElements: HTMLCollectionOf<HTMLDivElement>) {\n        event.preventDefault();\n\n        /*If the arrow UP key is pressed, decrease the focusedItemIndex variable:*/\n        this.focusedItemIndex--;\n        if (this.focusedItemIndex < 0) this.focusedItemIndex = (itemElements.length - 1);\n        /*and and make the current item more visible:*/\n        this.setActive(itemElements, this.focusedItemIndex);\n    }\n\n    private handleArrowDownEvent(event: KeyboardEvent, itemElements: HTMLCollectionOf<HTMLDivElement>) {\n        event.preventDefault();\n\n        /*If the arrow DOWN key is pressed, increase the focusedItemIndex variable:*/\n        this.focusedItemIndex++;\n        if (this.focusedItemIndex >= itemElements.length) this.focusedItemIndex = 0;\n        /*and and make the current item more visible:*/\n        this.setActive(itemElements, this.focusedItemIndex);\n    }\n\n    private setActive(items: HTMLCollectionOf<HTMLDivElement>, index: number) {\n        if (!items || !items.length) return false;\n        DomHelper.addActiveClassToDropdownItem(items, index);\n\n        if (!this.options.skipSelectionOnArrowKey) {\n            // Change input value and notify\n            if (CalculationHelper.returnIfFunction(this.postprocessHook)) {\n                this.inputElement.value = this.postprocessHook(this.currentItems[index]);\n            } else {\n                this.inputElement.value = this.currentItems[index].properties.formatted;\n            }\n            this.notifyValueSelected(this.currentItems[index]);\n        }\n    }\n\n    private setValueAndNotify(feature: any) {\n        if (CalculationHelper.returnIfFunction(this.postprocessHook)) {\n            this.inputElement.value = this.postprocessHook(feature);\n        } else {\n            this.inputElement.value = feature.properties.formatted;\n        }\n\n        this.notifyValueSelected(feature);\n\n        /* Close the list of autocompleted values: */\n        this.closeDropDownList();\n    }\n\n    private clearFieldAndNotify(event: MouseEvent) {\n        event.stopPropagation();\n        this.inputElement.value = '';\n        this.removeClearButton();\n\n        this.cancelPreviousRequest();\n\n        this.cancelPreviousTimeout();\n\n        this.closeDropDownList();\n\n        // notify here\n        this.notifyValueSelected(null);\n    }\n\n    private closeDropDownList() {\n        if (this.autocompleteItemsElement) {\n            this.container.removeChild(this.autocompleteItemsElement);\n            this.autocompleteItemsElement = null;\n            this.callbacks.notifyClosed();\n        }\n    }\n\n    private notifyValueSelected(feature: any) {\n        this.cancelPreviousPlaceDetailsRequest();\n\n        if (this.noNeedToRequestPlaceDetails(feature)) {\n            this.callbacks.notifyChange(feature);\n        } else {\n            let promise = this.sendPlaceDetailsRequestOrAlt(feature);\n\n            promise.then((detailesFeature: any) => {\n                this.callbacks.notifyChange(detailesFeature);\n                this.currentPlaceDetailsPromiseReject = null;\n            }, (err) => {\n                if (!err.canceled) {\n                    console.log(err);\n                    this.callbacks.notifyChange(feature);\n                    this.currentPlaceDetailsPromiseReject = null;\n                }\n            });\n        }\n    }\n\n    private sendPlaceDetailsRequestOrAlt(feature: any) {\n        if (this.sendPlaceDetailsRequestAlt) {\n            return this.sendPlaceDetailsRequestAlt(feature, this)\n        } else {\n            return this.sendPlaceDetailsRequest(feature);\n        }\n    }\n\n    private noNeedToRequestPlaceDetails(feature: any) {\n        return !this.options.addDetails || !feature || feature.properties.nonVerifiedParts?.length;\n    }\n\n    private cancelPreviousPlaceDetailsRequest() {\n        if (this.currentPlaceDetailsPromiseReject) {\n            this.currentPlaceDetailsPromiseReject({\n                canceled: true\n            });\n            this.currentPlaceDetailsPromiseReject = null;\n        }\n    }\n\n    private openDropdownAgain() {\n        const event = document.createEvent('Event');\n        event.initEvent('input', true, true);\n        this.inputElement.dispatchEvent(event);\n    }\n\n    private constructOptions(options: GeocoderAutocompleteOptions) {\n        this.options = options ? {...this.options, ...options} : this.options;\n        this.options.filter = this.options.filter || {};\n        this.options.bias = this.options.bias || {};\n\n        if (this.options.countryCodes) {\n            this.addFilterByCountry(this.options.countryCodes);\n        }\n\n        if (this.options.position) {\n            this.addBiasByProximity(this.options.position);\n        }\n    }\n\n    private addClearButton() {\n        this.inputClearButton = document.createElement(\"div\");\n        this.inputClearButton.classList.add(\"geoapify-close-button\");\n        DomHelper.addIcon(this.inputClearButton, 'close');\n        this.inputClearButton.addEventListener(\"click\", this.clearFieldAndNotify.bind(this), false);\n        this.container.appendChild(this.inputClearButton);\n    }\n}\n\nexport interface GeocoderAutocompleteOptions {\n    type?: LocationType;\n    lang?: SupportedLanguage;\n    limit?: number;\n    placeholder?: string;\n    debounceDelay?: number;\n\n    filter?: { [key: string]: ByCircleOptions | ByCountryCodeOptions | ByRectOptions | string },\n    bias?: { [key: string]: ByCircleOptions | ByCountryCodeOptions | ByRectOptions | ByProximityOptions },\n\n    skipIcons?: boolean;\n\n/**\n * @deprecated The property should not be used; it is true by default. Use the addDetails property to add details.\n */\n    skipDetails?: boolean;\n\n    addDetails?: boolean;\n\n    skipSelectionOnArrowKey?: boolean;\n\n    // to remove in the next version\n    position?: GeoPosition;\n    countryCodes?: CountyCode[];\n\n    // extend results with non verified values if needed\n    allowNonVerifiedHouseNumber?: boolean;\n    allowNonVerifiedStreet?: boolean;\n}\n\nexport interface GeoPosition {\n    lat: number;\n    lon: number;\n}\n\nexport type ByCountryCodeOptions = CountyCode[];\n\nexport interface ByProximityOptions {\n    lon: number;\n    lat: number;\n}\n\nexport interface ByCircleOptions {\n    lon: number;\n    lat: number;\n    radiusMeters: number;\n}\n\nexport interface ByRectOptions {\n    lon1: number;\n    lat1: number;\n    lon2: number;\n    lat2: number;\n}\n\nexport type LocationType = 'country' | 'state' | 'city' | 'postcode' | 'street' | 'amenity';\nexport type SupportedLanguage = \"ab\" | \"aa\" | \"af\" | \"ak\" | \"sq\" | \"am\" | \"ar\" | \"an\" | \"hy\" | \"as\" | \"av\" | \"ae\" | \"ay\" | \"az\" | \"bm\" | \"ba\" | \"eu\" | \"be\" | \"bn\" | \"bh\" | \"bi\" | \"bs\" | \"br\" | \"bg\" | \"my\" | \"ca\" | \"ch\" | \"ce\" | \"ny\" | \"zh\" | \"cv\" | \"kw\" | \"co\" | \"cr\" | \"hr\" | \"cs\" | \"da\" | \"dv\" | \"nl\" | \"en\" | \"eo\" | \"et\" | \"ee\" | \"fo\" | \"fj\" | \"fi\" | \"fr\" | \"ff\" | \"gl\" | \"ka\" | \"de\" | \"el\" | \"gn\" | \"gu\" | \"ht\" | \"ha\" | \"he\" | \"hz\" | \"hi\" | \"ho\" | \"hu\" | \"ia\" | \"id\" | \"ie\" | \"ga\" | \"ig\" | \"ik\" | \"io\" | \"is\" | \"it\" | \"iu\" | \"ja\" | \"jv\" | \"kl\" | \"kn\" | \"kr\" | \"ks\" | \"kk\" | \"km\" | \"ki\" | \"rw\" | \"ky\" | \"kv\" | \"kg\" | \"ko\" | \"ku\" | \"kj\" | \"la\" | \"lb\" | \"lg\" | \"li\" | \"ln\" | \"lo\" | \"lt\" | \"lu\" | \"lv\" | \"gv\" | \"mk\" | \"mg\" | \"ms\" | \"ml\" | \"mt\" | \"mi\" | \"mr\" | \"mh\" | \"mn\" | \"na\" | \"nv\" | \"nb\" | \"nd\" | \"ne\" | \"ng\" | \"nn\" | \"no\" | \"ii\" | \"nr\" | \"oc\" | \"oj\" | \"cu\" | \"om\" | \"or\" | \"os\" | \"pa\" | \"pi\" | \"fa\" | \"pl\" | \"ps\" | \"pt\" | \"qu\" | \"rm\" | \"rn\" | \"ro\" | \"ru\" | \"sa\" | \"sc\" | \"sd\" | \"se\" | \"sm\" | \"sg\" | \"sr\" | \"gd\" | \"sn\" | \"si\" | \"sk\" | \"sl\" | \"so\" | \"st\" | \"es\" | \"su\" | \"sw\" | \"ss\" | \"sv\" | \"ta\" | \"te\" | \"tg\" | \"th\" | \"ti\" | \"bo\" | \"tk\" | \"tl\" | \"tn\" | \"to\" | \"tr\" | \"ts\" | \"tt\" | \"tw\" | \"ty\" | \"ug\" | \"uk\" | \"ur\" | \"uz\" | \"ve\" | \"vi\" | \"vo\" | \"wa\" | \"cy\" | \"wo\" | \"fy\" | \"xh\" | \"yi\" | \"yo\" | \"za\";\nexport type CountyCode = \"none\" | \"auto\" | \"ad\" | \"ae\" | \"af\" | \"ag\" | \"ai\" | \"al\" | \"am\" | \"an\" | \"ao\" | \"ap\" | \"aq\" | \"ar\" | \"as\" | \"at\" | \"au\" | \"aw\" | \"az\" | \"ba\" | \"bb\" | \"bd\" | \"be\" | \"bf\" | \"bg\" | \"bh\" | \"bi\" | \"bj\" | \"bm\" | \"bn\" | \"bo\" | \"br\" | \"bs\" | \"bt\" | \"bv\" | \"bw\" | \"by\" | \"bz\" | \"ca\" | \"cc\" | \"cd\" | \"cf\" | \"cg\" | \"ch\" | \"ci\" | \"ck\" | \"cl\" | \"cm\" | \"cn\" | \"co\" | \"cr\" | \"cu\" | \"cv\" | \"cx\" | \"cy\" | \"cz\" | \"de\" | \"dj\" | \"dk\" | \"dm\" | \"do\" | \"dz\" | \"ec\" | \"ee\" | \"eg\" | \"eh\" | \"er\" | \"es\" | \"et\" | \"eu\" | \"fi\" | \"fj\" | \"fk\" | \"fm\" | \"fo\" | \"fr\" | \"ga\" | \"gb\" | \"gd\" | \"ge\" | \"gf\" | \"gh\" | \"gi\" | \"gl\" | \"gm\" | \"gn\" | \"gp\" | \"gq\" | \"gr\" | \"gs\" | \"gt\" | \"gu\" | \"gw\" | \"gy\" | \"hk\" | \"hm\" | \"hn\" | \"hr\" | \"ht\" | \"hu\" | \"id\" | \"ie\" | \"il\" | \"in\" | \"io\" | \"iq\" | \"ir\" | \"is\" | \"it\" | \"jm\" | \"jo\" | \"jp\" | \"ke\" | \"kg\" | \"kh\" | \"ki\" | \"km\" | \"kn\" | \"kp\" | \"kr\" | \"kw\" | \"ky\" | \"kz\" | \"la\" | \"lb\" | \"lc\" | \"li\" | \"lk\" | \"lr\" | \"ls\" | \"lt\" | \"lu\" | \"lv\" | \"ly\" | \"ma\" | \"mc\" | \"md\" | \"me\" | \"mg\" | \"mh\" | \"mk\" | \"ml\" | \"mm\" | \"mn\" | \"mo\" | \"mp\" | \"mq\" | \"mr\" | \"ms\" | \"mt\" | \"mu\" | \"mv\" | \"mw\" | \"mx\" | \"my\" | \"mz\" | \"na\" | \"nc\" | \"ne\" | \"nf\" | \"ng\" | \"ni\" | \"nl\" | \"no\" | \"np\" | \"nr\" | \"nu\" | \"nz\" | \"om\" | \"pa\" | \"pe\" | \"pf\" | \"pg\" | \"ph\" | \"pk\" | \"pl\" | \"pm\" | \"pr\" | \"ps\" | \"pt\" | \"pw\" | \"py\" | \"qa\" | \"re\" | \"ro\" | \"rs\" | \"ru\" | \"rw\" | \"sa\" | \"sb\" | \"sc\" | \"sd\" | \"se\" | \"sg\" | \"sh\" | \"si\" | \"sj\" | \"sk\" | \"sl\" | \"sm\" | \"sn\" | \"so\" | \"sr\" | \"st\" | \"sv\" | \"sy\" | \"sz\" | \"tc\" | \"td\" | \"tf\" | \"tg\" | \"th\" | \"tj\" | \"tk\" | \"tm\" | \"tn\" | \"to\" | \"tr\" | \"tt\" | \"tv\" | \"tw\" | \"tz\" | \"ua\" | \"ug\" | \"um\" | \"us\" | \"uy\" | \"uz\" | \"va\" | \"vc\" | \"ve\" | \"vg\" | \"vi\" | \"vn\" | \"vu\" | \"wf\" | \"ws\" | \"ye\" | \"yt\" | \"za\" | \"zm\" | \"zw\";\n"],"names":["BY_COUNTRYCODE","BY_RECT","BY_CIRCLE","BY_PROXIMITY","BY_PLACE","CalculationHelper","isLatitude","num","isFinite","Math","abs","isLongitude","isNotOpenStreetMapData","feature","properties","datasource","sourcename","place_id","extendByNonVerifiedValues","options","features","parsedAddress","forEach","housenumber","allowNonVerifiedHouseNumber","rank","match_type","this","addHouseNumberToFormatted","nonVerifiedParts","street","allowNonVerifiedStreet","replace","m","toUpperCase","address_line1","address_line2","formatted","featureProperties","houseNumberAndStreetFormatsPerCountry","format","Object","keys","find","key","indexOf","country_code","addressPart","generatePlacesUrl","placeDetailsUrl","placeId","apiKey","url","lang","needToFilterDataBySuggestionsFilter","currentItems","suggestionsFilter","length","needToCalculateExtendByNonVerifiedValues","data","query","parsed","generateUrl","value","geocoderUrl","encodeURIComponent","type","limit","filters","filterByCountryCodes","filter","filterByCircle","filterByRect","filterByPlace","push","join","toLowerCase","lat","lon","radiusMeters","lat1","lon1","lat2","lon2","bias","biasByCountryCodes","biasByCircle","biasByRect","biasByProximity","returnIfFunction","func","DomHelper","createInputElement","inputElement","container","classList","add","setAttribute","placeholder","appendChild","addFeatureIcon","element","countryCode","iconMap","unknown","amenity","building","suburb","district","postcode","city","county","state","countryData","countiesData","code","emojiElement","document","createElement","innerText","emoji","addIcon","icon","icons","close","path","viewbox","road","svgElement","createElementNS","iconElement","getStyledAddressSingleValue","currentValue","displayValue","valueIndex","substring","getStyledAddress","mainPart","secondaryPart","parts","split","map","part","trim","name","slice","mainElements","min","max","addDropdownIcon","itemElement","result_type","addActiveClassToDropdownItem","items","index","i","remove","createDropdownItemText","textElement","createDropdownItem","Callbacks","changeCallbacks","suggestionsChangeCallbacks","inputCallbacks","openCallbacks","closeCallbacks","addCallback","operation","callback","currentCallbacks","getCallbacksByOperation","removeCallback","splice","setCallbacksByOperation","notifyInputChange","notifyChange","notifySuggestions","notifyOpened","notifyClosed","callbacks","GeocoderAutocomplete","inputClearButton","autocompleteItemsElement","focusedItemIndex","currentPromiseReject","currentPlaceDetailsPromiseReject","currentTimeout","preprocessHook","postprocessHook","sendGeocoderRequestAlt","sendPlaceDetailsRequestAlt","debounceDelay","constructor","constructOptions","addClearButton","addEventListeners","setGeocoderUrl","setPlaceDetailsUrl","setType","setLang","setAddDetails","addDetails","setSkipIcons","skipIcons","setAllowNonVerifiedHouseNumber","setAllowNonVerifiedStreet","setCountryCodes","codes","console","warn","countryCodes","setPosition","position","setLimit","setValue","getValue","addFilterByCountry","addFilterByCircle","addFilterByRect","addFilterByPlace","clearFilters","addBiasByCountry","addBiasByCircle","addBiasByRect","addBiasByProximity","clearBias","on","off","once","current","currentListener","setSuggestionsFilter","suggestionsFilterFunc","setPreprocessHook","preprocessHookFunc","setPostprocessHook","postprocessHookFunc","setSendGeocoderRequestFunc","sendGeocoderRequestFunc","setSendPlaceDetailsRequestFunc","sendPlaceDetailsRequestFunc","isOpen","closeDropDownList","open","openDropdownAgain","sendGeocoderRequestOrAlt","sendGeocoderRequest","Promise","resolve","reject","fetch","then","response","ok","json","sendPlaceDetailsRequest","onUserInput","event","userEnteredValue","cancelPreviousRequest","cancelPreviousTimeout","removeClearButton","showClearButton","window","setTimeout","onDropdownDataLoad","err","canceled","log","createDropdown","populateDropdownItem","innerHTML","addEventListenerOnDropdownClick","addEventListener","e","stopPropagation","setValueAndNotify","clearTimeout","bind","onUserKeyPress","target","itemElements","getElementsByTagName","handleArrowDownEvent","handleArrowUpEvent","handleEnterEvent","preventDefault","skipSelectionOnArrowKey","setActive","notifyValueSelected","clearFieldAndNotify","removeChild","cancelPreviousPlaceDetailsRequest","noNeedToRequestPlaceDetails","sendPlaceDetailsRequestOrAlt","detailesFeature","createEvent","initEvent","dispatchEvent"],"mappings":"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"}